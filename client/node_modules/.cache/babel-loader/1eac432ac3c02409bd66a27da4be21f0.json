{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["G:/documents/crown-clothing/crwn-clothing-estore/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAEAC,EAAAA,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAhB;AAEEF,EAAAA,aAAa,CACVG,GADH,GAEGC,IAFH,CAEQC,QAAQ,IAAI;AAClB,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACC,GALH,EAMGI,KANH,CAMSC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CAN1B;AAOH;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACvC,QAAMnB,SAAS,CACbC,eAAe,CAACmB,sBADH,EAEblB,qBAFa,CAAf;AAID","sourcesContent":["import { takeEvery } from 'redux-saga/effects'\r\n\r\nimport ShopActionTypes from './shop.types'\r\n\r\nexport function* fetchCollectionsAsync() {\r\n  yield console.log('I am fired')\r\n\r\n  collectionRef = firestore.collection('collections')\r\n\r\n    collectionRef\r\n      .get()\r\n      .then(snapshot => {\r\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot)\r\n      dispatch(fetchCollectionsSuccess(collectionsMap))\r\n      })\r\n      .catch(error => dispatch(fetchCollectionsFailure(error.message)))\r\n}\r\n\r\nexport function* fetchCollectionsStart() {\r\n  yield takeEvery(\r\n    ShopActionTypes.FETCH_COLECTIONS_START,\r\n    fetchCollectionsAsync\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}